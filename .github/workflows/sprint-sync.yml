name: sprint-sync

on:
  issue_comment:
    types: [created, edited]
  workflow_dispatch: {}

permissions:
  issues: write
  pull-requests: read
  contents: read

concurrency:
  group: sprint-sync-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: false

jobs:
  handle:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.issue && contains(github.event.issue.labels.*.name, 'sprint-plan')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Gate on command
        id: gate
        env:
          BODY: ${{ github.event.comment.body }}
          EVT:  ${{ github.event_name }}
        run: |
          if [ "$EVT" = "workflow_dispatch" ]; then
            echo "cmd=/sync-sprint" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          b="$(echo "$BODY" | tr '[:upper:]' '[:lower:]')"
          case "$b" in
            */help-sprint*)   echo "cmd=/help-sprint"   >> "$GITHUB_OUTPUT" ;;
            */preview-sprint*) echo "cmd=/preview-sprint" >> "$GITHUB_OUTPUT" ;;
            */sync-sprint*)    echo "cmd=/sync-sprint"    >> "$GITHUB_OUTPUT" ;;
            *) echo "No sprint command found"; exit 78 ;; # neutral
          esac

      - name: Process command
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const cmd = core.getInput('cmd', { required: false }) || '${{ steps.gate.outputs.cmd }}';
            const issue_number = (context.payload.issue && context.payload.issue.number) || core.getInput('issue_number') || context.issue.number;
            const { data: issue } = await github.rest.issues.get({ ...context.repo, issue_number });

            if (!issue.labels.map(l => l.name).includes('sprint-plan')) {
              core.info('Issue is not labeled sprint-plan; exiting neutral.');
              return;
            }

            // Parse Issue form values by headings/labels we defined in the form
            function pick(id, fallback='') {
              // Issue forms include a leading "### <Label>\n\n<value>" blocks
              const rx = new RegExp(`(?<=###\\s*${id.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&')}\\s*\\n\\n)([\\s\\S]*?)(?=\\n\\n###|$)`, 'i');
              const m = issue.body.match(rx);
              return (m ? m[1].trim() : fallback).trim();
            }

            const milestoneName = pick('Milestone name (exact)');
            const startDate = pick('Start date (YYYY-MM-DD)');
            const endDate   = pick('End date (YYYY-MM-DD)');
            const goal      = pick('Sprint Goal');
            const scope     = pick('Scope \\(Committed P0s\\)');
            const stretch   = pick('Stretch \\(P1s, optional\\)');
            const nonGoals  = pick('Out of Scope \\(Non-goals\\)');
            const demo      = pick('Demo Script \\(what we will show\\)');
            const risks     = pick('Risks & Mitigations');
            const wow       = pick('Ways of Working');
            const doneWhen  = pick('Done when \\(Definition of Done for this sprint\\)');

            if (!milestoneName || !startDate || !endDate || !goal || !scope) {
              const msg = `Missing required fields. Need: Milestone name, dates, Sprint Goal, Scope.`;
              if (cmd === '/sync-sprint') {
                await github.rest.issues.createComment({ ...context.repo, issue_number, body: `⚠️ ${msg}` });
              }
              core.setFailed(msg);
              return;
            }

            const header = `# ${milestoneName}\n\n**Window:** ${startDate} → ${endDate}\n\n**Source plan:** #${issue.number}\n<!-- sprint-plan-issue:${issue.number} -->`;
            const sections = [
              ['## Sprint Goal', goal],
              ['## Scope (Committed P0s)', scope],
              ...(stretch ? [['## Stretch', stretch]] : []),
              ...(nonGoals ? [['## Out of Scope (Non-goals)', nonGoals]] : []),
              ...(demo ? [['## Demo Script', '```bash\n' + demo.replace(/^```(bash)?/,'').replace(/```$/,'').trim() + '\n```']] : []),
              ...(risks ? [['## Risks & Mitigations', risks]] : []),
              ...(wow ? [['## Ways of Working', wow]] : []),
              ...(doneWhen ? [['## Done when', doneWhen]] : []),
            ];
            const rendered = [header, ...sections.map(([h, b]) => `${h}\n\n${b}`)].join('\n\n');

            if (cmd === '/help-sprint') {
              await github.rest.issues.createComment({
                ...context.repo, issue_number,
                body: [
                  '**Sprint commands**',
                  '- `/preview-sprint` – render a preview of the milestone description',
                  '- `/sync-sprint` – create/update the milestone with this description',
                  '',
                  '_Milestone title & dates come from the form fields; this Issue remains the source of truth._'
                ].join('\n')
              });
              return;
            }

            if (cmd === '/preview-sprint') {
              await github.rest.issues.createComment({
                ...context.repo, issue_number,
                body: `<details><summary>Milestone preview for <strong>${milestoneName}</strong></summary>\n\n${rendered}\n\n</details>`
              });
              return;
            }

            // /sync-sprint
            // Find or create milestone by exact title
            const { data: milestones } = await github.rest.issues.listMilestones({
              ...context.repo, state: 'open'
            });
            let milestone = milestones.find(m => m.title === milestoneName);
            const dueOn = new Date(endDate + 'T23:59:59Z').toISOString();

            if (!milestone) {
              const created = await github.rest.issues.createMilestone({
                ...context.repo,
                title: milestoneName,
                description: rendered,
                due_on: dueOn
              });
              milestone = created.data;
            } else {
              await github.rest.issues.updateMilestone({
                ...context.repo,
                milestone_number: milestone.number,
                title: milestoneName,
                description: rendered,
                due_on: dueOn,
                state: 'open'
              });
            }

            await github.rest.issues.createComment({
              ...context.repo, issue_number,
              body: `✅ Synced to milestone **${milestone.title}** (due ${endDate}).`
            });
